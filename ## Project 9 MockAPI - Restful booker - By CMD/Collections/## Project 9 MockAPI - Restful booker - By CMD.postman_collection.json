{
	"info": {
		"_postman_id": "e253acb1-2c27-44a9-bb4d-5fa5e38015cb",
		"name": "## Project 9 MockAPI - Restful booker - By CMD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46870850",
		"_collection_link": "https://anujrajput-7274379.postman.co/workspace/Anuj-Rajput's-Workspace~1e760851-0311-47f3-8423-aca0d93b9ed7/collection/46870850-e253acb1-2c27-44a9-bb4d-5fa5e38015cb?action=share&source=collection_link&creator=46870850"
	},
	"item": [
		{
			"name": "CreateBooking (cURL) - TC by yourself",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"bookingid\",pm.response.json()[\"bookingid\"]);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{$randomUserName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"{{$randomDateFuture}}\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					]
				},
				"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "MockAPI - CreateBooking (cURL)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields: bookingid, booking, and id\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item).to.have.all.keys('bookingid', 'booking', 'id');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the booking object structure and its required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item).to.have.property('booking').that.is.an('object');\r",
							"        pm.expect(item.booking).to.have.all.keys('firstname', 'lastname', 'totalprice', 'depositpaid', 'bookingdates', 'additionalneeds');\r",
							"\r",
							"        pm.expect(item.booking.firstname).to.be.a('string');\r",
							"        pm.expect(item.booking.lastname).to.be.a('string');\r",
							"        pm.expect(item.booking.totalprice).to.be.a('number');\r",
							"        pm.expect(item.booking.depositpaid).to.be.a('boolean');\r",
							"        \r",
							"        pm.expect(item.booking.bookingdates).to.be.an('object').that.has.all.keys('checkin', 'checkout');\r",
							"        pm.expect(item.booking.bookingdates.checkin).to.be.a('string');\r",
							"        pm.expect(item.booking.bookingdates.checkout).to.be.a('string');\r",
							"\r",
							"        pm.expect(item.additionalneeds).to.be.a('string').or.to.be.undefined;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total price is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.booking.totalprice).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Checkin and checkout dates are in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(item => {\r",
							"        const checkinDate = item.booking.bookingdates.checkin;\r",
							"        const checkoutDate = item.booking.bookingdates.checkout;\r",
							"\r",
							"        pm.expect(checkinDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Checkin date format should be YYYY-MM-DD\");\r",
							"        pm.expect(checkoutDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Checkout date format should be YYYY-MM-DD\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/restful",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"restful"
					]
				}
			},
			"response": []
		}
	]
}