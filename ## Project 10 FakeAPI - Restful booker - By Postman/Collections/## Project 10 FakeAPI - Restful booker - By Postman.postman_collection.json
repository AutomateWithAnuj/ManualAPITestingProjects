{
	"info": {
		"_postman_id": "08c5a71a-9b6f-4f10-b792-c699a8515671",
		"name": "## Project 10 FakeAPI - Restful booker - By Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46870850",
		"_collection_link": "https://anujrajput-7274379.postman.co/workspace/Anuj-Rajput's-Workspace~1e760851-0311-47f3-8423-aca0d93b9ed7/collection/46870850-08c5a71a-9b6f-4f10-b792-c699a8515671?action=share&source=collection_link&creator=46870850"
	},
	"item": [
		{
			"name": "booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('bookingid');\r",
							"    pm.expect(responseData).to.have.property('booking').that.is.an('object');\r",
							"    \r",
							"    const bookingData = responseData.booking;\r",
							"    pm.expect(bookingData).to.have.all.keys('firstname', 'lastname', 'totalprice', 'depositpaid', 'bookingdates', 'additionalneeds');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total price must be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.booking.totalprice).to.be.a('number').and.to.be.at.least(0, \"Total price should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Booking dates contain valid checkin and checkout date formats\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.booking).to.exist.and.to.be.an('object');\r",
							"    \r",
							"    const checkinDate = responseData.booking.bookingdates.checkin;\r",
							"    const checkoutDate = responseData.booking.bookingdates.checkout;\r",
							"    \r",
							"    const dateFormatRegex = /^\\d{4}-\\d{2}-\\d{2}$/; // YYYY-MM-DD format\r",
							"    \r",
							"    pm.expect(checkinDate).to.match(dateFormatRegex, \"Checkin date format is invalid\");\r",
							"    pm.expect(checkoutDate).to.match(dateFormatRegex, \"Checkout date format is invalid\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\n            \"bookingid\": 2933,\n            \"booking\": {\n                \"firstname\": \"Violette_Bednar54\",\n                \"lastname\": \"Zemlak\",\n                \"totalprice\": 111,\n                \"depositpaid\": true,\n                \"bookingdates\": {\n                    \"checkin\": \"2018-01-01\",\n                    \"checkout\": \"2026-04-04\"\n                },\n                \"additionalneeds\": \"Breakfast\"\n        }        \n    }"
				}
			]
		},
		{
			"name": "booking",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/booking/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/booking1",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking1"
							]
						}
					},
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\n            \"bookingid\": 2933,\n            \"booking\": {\n                \"firstname\": \"Violette_Bednar54\",\n                \"lastname\": \"Zemlak\",\n                \"totalprice\": 111,\n                \"depositpaid\": true,\n                \"bookingdates\": {\n                    \"checkin\": \"2018-01-01\",\n                    \"checkout\": \"2026-04-04\"\n                },\n                \"additionalneeds\": \"Breakfast\"\n        }        \n    }"
				}
			]
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://aafed92b-9c18-4ff1-9c46-0295b10b3e9f.mock.pstmn.io"
		}
	]
}